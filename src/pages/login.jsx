import { IconSignupProfile } from "@/assets/Icons";
import { PrimaryBtn } from "@/common/PrimaryBtn";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { Input } from "postcss";
import { yupResolver } from "@hookform/resolvers/yup";
import * as yup from "yup";
import { useEffect, useRef, useState } from "react";
import { useForm } from "react-hook-form";
import { IoEyeOff, IoEyeSharp } from "react-icons/io5";
import { MdArrowBack, MdCheck } from "react-icons/md";
import { loginService } from "@/services/loginService";
import { useAuth, useAuthActions } from "@/Provider/AuthProvider";
import { useRouter } from "next/router";
export default function Home() {
  const [value, setValue] = useState(null);
  //   const [show, setShow] = useState(false);
  const router = useRouter();

  const { user, loading } = useAuth();
  const dispatcher = useAuthActions();
  const schema = yup
    .object({
      tell: yup.string().required(),
      password: yup.string("اجباری").required("salam"),
    })
    .required();

  const [passwordShow, setPasswordShow] = useState(false);
  const {
    register,
    handleSubmit,
    watch,
    formState: { errors, isValid },
  } = useForm({
    resolver: yupResolver(schema),
  });
  const onSubmit = (data) => {
    dispatcher({ type: "LOGIN", payload: data });
  };
  console.log(isValid);
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="px-6 pt-12 flex flex-col gap-14 items-center ">
        <div className="relative w-full flex flex-col items-center gap-4">
          <div className="bg-primary-50 rounded-full w-28 h-28 relative">
            <Image
              alt="profile"
              src={IconSignupProfile}
              className="absolute w-[95%] h-[95%]"
            />
          </div>
          <span className="text-sm">Login information</span>
          <button
            onClick={() => router.push("/")}
            className="text-2xl absolute top-0 left-0"
          >
            <MdArrowBack />
          </button>
          <button
            onClick={handleSubmit((e) => console.log(e, "as"))}
            disabled={!isValid}
            className="bg-primary-900  rounded-full text-white w-8 h-8 flex items-center justify-center text-xl absolute right-0 top-0 disabled:cursor-not-allowed disabled:bg-gray-50"
          >
            <MdCheck />
          </button>
        </div>

        <form
          onSubmit={handleSubmit(onSubmit)}
          className="flex flex-col items-center gap-8 w-full"
        >
          <input
            type={"text"}
            {...register("tell")}
            placeholder="username"
            className="w-full h-12 rounded-4xl focus:border border-gray-50 outline-none p-4 bg-primary-50  text-sm placeholder:text-gray-300 text-gray-900 "
          />

          <div className="w-full h-12 rounded-4xl bg-primary-50 relative">
            <input
              type={passwordShow ? "text" : "password"}
              {...register("password")}
              placeholder="password"
              className="w-full h-12 rounded-4xl focus:border border-gray-50 outline-none p-4 bg-primary-50  text-sm placeholder:text-gray-300 text-gray-900 "
            />
            <button
              className="text-gray-400 absolute md:text-2xl text-lg top-3 right-4"
              onClick={() => setPasswordShow(!passwordShow)}
              type={"button"}
            >
              {!passwordShow ? <IoEyeSharp /> : <IoEyeOff />}
            </button>
          </div>
          {errors.mail && <p role="alert">{errors.mail?.message}</p>}
        </form>
      </main>
    </>
  );
}
